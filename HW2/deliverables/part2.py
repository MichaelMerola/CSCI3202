import robby
#import numpy as np
from utils import *
import random
from statistics import mean

POSSIBLE_ACTIONS = ["MoveNorth", "MoveSouth", "MoveEast", "MoveWest", "StayPut", "PickUpCan", "MoveRandom"]
rw = robby.World(10, 10)
rw.graphicsOff()

def stringify(s):
    return ''.join(str(e) for e in s)

def sortByFitness(genomes):
    tuples = [(fitness(g), g) for g in genomes]
    tuples.sort()
    sortedFitnessValues = [f for (f, g) in tuples]
    sortedGenomes = [g for (f, g) in tuples]
    return sortedGenomes, sortedFitnessValues


def randomGenome(length):
    """
    :param length:
    :return: string, random integers between 0 and 6 inclusive
    """

    """Your Code Here"""
    gen = [random.randint(0,6) for i in range(length)]

    return stringify(gen)
#end randomGenome

def makePopulation(size, length):
    """
    :param size - of population:
    :param length - of genome
    :return: list of length size containing genomes of length length
    """


    """Your Code Here"""
    pop = []
    for i in range(size):
        pop.append(randomGenome(length))

    return pop
#end makePopulation

def fitness(genome, steps=200, init=0.50):
    """

    :param genome: to test
    :param steps: number of steps in the cleaning session
    :param init: amount of cans
    :return:
    """
    if type(genome) is not str or len(genome) != 243:
        raise Exception("strategy is not a string of length 243")
    for char in genome:
        if char not in "0123456":
            raise Exception("strategy contains a bad character: '%s'" % char)
    if type(steps) is not int or steps < 1:
        raise Exception("steps must be an integer > 0")
    if type(init) is str:
        # init is a config file
        rw.load(init)
    elif type(init) in [int, float] and 0 <= init <= 1:
        # init is a can density
        rw.goto(0, 0)
        rw.distributeCans(init)
    else:
        raise Exception("invalid initial configuration")

    total_rewards = []

    for i in range(25):

        cumul_reward = 0
        sim_count = 0
        while sim_count < steps:
            p = rw.getPerceptCode()
            action = POSSIBLE_ACTIONS[int(genome[p])]
            reward = rw.performAction(action)

            cumul_reward += reward
            sim_count += 1
        #end sim

        #print(cumul_reward)

        total_rewards.append(cumul_reward)
    #end sessions

    #print(total_rewards)

    return mean(total_rewards)



def evaluateFitness(population):
    """
    :param population:
    :return: a pair of values: the average fitness of the population as a whole and the fitness of the best individual
    in the population.
    """
    best_fit = fitness(population[0])
    best_gen = population[0]
    average = 0
    for n in population:
        f = fitness(n)

        average += f

        if (f >= best_fit):
            best_fit = f
            best_gen = n

    overall_avg = average/len(population)

    return (overall_avg, best_fit, best_gen)


def crossover(genome1, genome2):
    """
    :param genome1:
    :param genome2:
    :return: two new genomes produced by crossing over the given genomes at a random crossover point.
    """
    #find crossover point, in case the genomes are different lengths
    minlength = min([len(genome1), len(genome2)])
    split = random.randint(1, minlength-1)
    #print('split', split)

    #split genomes
    g1_prefix = genome1[:split]
    g1_suffix = genome1[split:]

    g2_prefix = genome2[:split]
    g2_suffix = genome2[split:]

    #cross genomes
    new_g1 = g1_prefix + g2_suffix
    new_g2 = g2_prefix + g1_suffix

    #print(new_g1)
    #print(new_g2)

    return (new_g1, new_g2)


def mutate(genome, mutationRate):
    """
    :param genome:
    :param mutationRate:
    :return: a new mutated version of the given genome.
    """
    new_gen = ''

    for i in genome:
        r = random.uniform(0, 1)

        if (r <= mutationRate):
            #flip
            i = random.randint(0, 6)

        new_gen += str(i)

    return new_gen

def selectPair(population):
    """

    :param population:
    :return: two genomes from the given population using fitness-proportionate selection.
    This function should use RankSelection,
    """
    sortedGenomes, sortedFitnessValues = sortByFitness(population)

    gen_1 = weightedChoice(sortedGenomes, sortedFitnessValues)
    gen_2 = weightedChoice(sortedGenomes, sortedFitnessValues)

    return (gen_1, gen_2)

#end selectPair


def runGA(populationSize, crossoverRate, mutationRate, logFile=""):
    """

    :param populationSize: :param crossoverRate: :param mutationRate: :param logFile: :return: xt file in which to
    store the data generated by the GA, for plotting purposes. When the GA terminates, this function should return
    the generation at which the string of all ones was found.is the main GA program, which takes the population size,
    crossover rate (pc), and mutation rate (pm) as parameters. The optional logFile parameter is a string specifying
    the name of a te
    """
    file = open(logFile, 'w')
    genome_length = 243
    generations = 300
    
    gen_zero = makePopulation(populationSize, genome_length)
    count_gens = 1
    current_gens = gen_zero

    best_strat = None

    print("Population Size = ", populationSize)
    print("Genome Length = ", genome_length)

    while count_gens <= generations:

        #evaluate current
        current_fit = evaluateFitness(current_gens)
        print("Generation ", count_gens, ": average fit = ", current_fit[0], ", best fit = ", current_fit[1])
        best_strat = current_fit[2]

        if (count_gens % 10 == 0): #every 10 generations
            print("... writing stats ...")
            send = str(count_gens) + "\t" + str(current_fit[0]) + "\t" + str(current_fit[1]) + "\t" + current_fit[2] + '\n'
            file.write(send)


        #build new gen
        gen_new = []
        while len(gen_new) < populationSize:

            #choose parents
            chosen = selectPair(current_gens)

            #crossover
            children = chosen
            cr = random.uniform(0, 1)
            if (cr <= crossoverRate):
                children = crossover(chosen[0], chosen[1])

            #mutation
            mute_child1 = mutate(children[0], mutationRate)
            mute_child2 = mutate(children[0], mutationRate)

            #add to new gen
            gen_new.append(mute_child1)
            gen_new.append(mute_child2)

        #end buildnewgen

        current_gens = gen_new
        count_gens += 1
    #end while
    file.close()

    return (best_strat)
#end runGA


def test_FitnessFunction():
    f = fitness(rw.strategyM)
    print("Fitness for StrategyM : {0}".format(f))


def runExperiment(pop, cross, mute):

    best = runGA(pop, cross, mute, "p2-runs/​GAoutput.txt")

    file = open("p2-runs/​bestStrategy.txt", 'w')
    file.write(best)
    file.close()

    return best
#end report

# TESTING CODE
print("Test Suite")

best = runExperiment(100, 1.0, 0.005)

rw.demo(best)

#print(runGA(100, 1.0, 0.005, "p2-runs/run1.txt"))

#reportTester(50, 100, 0.7, 0.001)

# g = randomGenome(243)

# print(g)

#rw.demo(g)

#print(fitness(g))

#test_FitnessFunction()

#runGA(100, 1.0, 0.05)